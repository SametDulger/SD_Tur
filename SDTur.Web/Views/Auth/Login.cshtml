@model SDTur.Web.Models.Auth.LoginViewModel

@{
    ViewData["Title"] = "Giriş";
    Layout = null;
}

<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - SDTur</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .login-card {
            background: white;
            border-radius: 15px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            max-width: 400px;
            width: 100%;
        }
        .login-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem;
            text-align: center;
        }
        .login-body {
            padding: 2rem;
        }
        .form-floating {
            margin-bottom: 1rem;
        }
        .btn-login {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            border-radius: 25px;
            padding: 12px 30px;
            font-weight: 600;
            width: 100%;
            margin-top: 1rem;
        }
        .btn-login:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }
        .alert {
            border-radius: 10px;
            border: none;
        }
        .validation-summary-errors {
            color: #dc3545;
            font-size: 0.875rem;
            margin-bottom: 1rem;
        }
        .field-validation-error {
            color: #dc3545;
            font-size: 0.75rem;
            display: block;
            margin-top: 0.25rem;
        }
    </style>
</head>
<body>
    <div class="login-card">
        <div class="login-header">
            <i class="bi bi-airplane-engines" style="font-size: 3rem;"></i>
            <h2 class="mt-3 mb-0">SDTur</h2>
            <p class="mb-0 opacity-75">Tur Şirketi Otomasyon Sistemi</p>
        </div>
        
        <div class="login-body">
            <!-- Demo Kullanıcı Bilgileri -->
            <div class="alert alert-info" style="font-size: 0.8rem; padding: 0.75rem;">
                <div class="mb-2"><strong>Demo Kullanıcı Bilgileri:</strong></div>
                <div class="row">
                    <div class="col-4"><strong>Admin:</strong></div>
                    <div class="col-8">admin / admin123</div>
                </div>
                <div class="row">
                    <div class="col-4"><strong>Manager:</strong></div>
                    <div class="col-8">manager / manager123</div>
                </div>
                <div class="row">
                    <div class="col-4"><strong>Sales:</strong></div>
                    <div class="col-8">sales / sales123</div>
                </div>
            </div>

            @if (!ViewData.ModelState.IsValid)
            {
                <div class="alert alert-danger">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    <strong>Giriş Hatası:</strong>
                    <div asp-validation-summary="All" class="validation-summary-errors mt-2"></div>
                </div>
            }

            <form asp-action="Login" asp-controller="Auth" method="post" id="loginForm">
                <input type="hidden" name="returnUrl" value="@ViewData["ReturnUrl"]" />
                
                <div class="form-floating">
                    <input asp-for="Username" class="form-control" placeholder="Kullanıcı Adı" />
                    <label asp-for="Username">Kullanıcı Adı</label>
                    <span asp-validation-for="Username" class="field-validation-error"></span>
                </div>

                <div class="form-floating">
                    <input asp-for="Password" type="password" class="form-control" placeholder="Şifre" />
                    <label asp-for="Password">Şifre</label>
                    <span asp-validation-for="Password" class="field-validation-error"></span>
                </div>

                <div class="form-check mb-3">
                    <input asp-for="RememberMe" class="form-check-input" />
                    <label asp-for="RememberMe" class="form-check-label">
                        Beni Hatırla
                    </label>
                </div>

                <button type="submit" class="btn btn-primary btn-login" id="loginButton">
                    <i class="bi bi-box-arrow-in-right me-2"></i>
                    <span id="loginButtonText">Giriş Yap</span>
                    <span id="loginButtonSpinner" class="spinner-border spinner-border-sm ms-2" style="display: none;"></span>
                </button>
            </form>

            <div class="text-center mt-4">
                <small class="text-muted">
                    <i class="bi bi-shield-check me-1"></i>
                    Güvenli bağlantı ile korunmaktadır
                </small>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Form validation and submission
        document.getElementById('loginForm').addEventListener('submit', function(e) {
            const username = document.getElementById('Username').value.trim();
            const password = document.getElementById('Password').value.trim();
            const loginButton = document.getElementById('loginButton');
            const loginButtonText = document.getElementById('loginButtonText');
            const loginButtonSpinner = document.getElementById('loginButtonSpinner');
            
            // Clear previous validation errors
            clearValidationErrors();
            
            let hasErrors = false;
            
            if (!username) {
                showFieldError('Username', 'Kullanıcı adı gereklidir');
                hasErrors = true;
            }
            
            if (!password) {
                showFieldError('Password', 'Şifre gereklidir');
                hasErrors = true;
            }
            
            if (hasErrors) {
                e.preventDefault();
                return false;
            }
            
            // Show loading state
            loginButton.disabled = true;
            loginButtonText.textContent = 'Giriş yapılıyor...';
            loginButtonSpinner.style.display = 'inline-block';
        });
        
        function clearValidationErrors() {
            const errorSpans = document.querySelectorAll('.field-validation-error');
            errorSpans.forEach(span => span.textContent = '');
        }
        
        function showFieldError(fieldName, message) {
            const field = document.getElementById(fieldName);
            const errorSpan = field.parentNode.querySelector('.field-validation-error');
            if (errorSpan) {
                errorSpan.textContent = message;
            }
        }
    </script>
</body>
</html> 